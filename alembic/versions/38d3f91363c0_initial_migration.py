"""Initial migration

Revision ID: 38d3f91363c0
Revises: c3aa444b03de
Create Date: 2025-02-23 19:56:25.245649

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic
revision = '38d3f91363c0'
down_revision = 'c3aa444b03de'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('market_data',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('symbol', sa.String(), nullable=True),
    sa.Column('timestamp', sa.DateTime(), nullable=True),
    sa.Column('open_price', sa.Float(), nullable=True),
    sa.Column('high_price', sa.Float(), nullable=True),
    sa.Column('low_price', sa.Float(), nullable=True),
    sa.Column('close_price', sa.Float(), nullable=True),
    sa.Column('volume', sa.Integer(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_market_data_id'), 'market_data', ['id'], unique=False)
    op.create_index(op.f('ix_market_data_symbol'), 'market_data', ['symbol'], unique=False)
    op.create_table('strategies',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('parameters', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_index(op.f('ix_strategies_id'), 'strategies', ['id'], unique=False)
    op.create_table('orders',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('symbol', sa.String(), nullable=True),
    sa.Column('order_type', sa.String(), nullable=True),
    sa.Column('price', sa.Float(), nullable=True),
    sa.Column('quantity', sa.Integer(), nullable=True),
    sa.Column('status', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_orders_id'), 'orders', ['id'], unique=False)
    op.create_index(op.f('ix_orders_symbol'), 'orders', ['symbol'], unique=False)
    op.create_table('trading_sessions',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('symbol', sa.String(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('started_at', sa.DateTime(), nullable=True),
    sa.Column('ended_at', sa.DateTime(), nullable=True),
    sa.Column('config', sa.JSON(), nullable=True),
    sa.Column('total_pnl', sa.Float(), nullable=True),
    sa.Column('broker_name', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_trading_sessions_id'), 'trading_sessions', ['id'], unique=False)
    op.create_index(op.f('ix_trading_sessions_symbol'), 'trading_sessions', ['symbol'], unique=False)
    op.create_table('trade_logs',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('trade_id', sa.Integer(), nullable=True),
    sa.Column('log_message', sa.String(), nullable=True),
    sa.Column('timestamp', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['trade_id'], ['trades.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_trade_logs_id'), 'trade_logs', ['id'], unique=False)
    op.drop_index('ix_trading_strategies_id', table_name='trading_strategies')
    op.drop_table('trading_strategies')
    op.drop_index('ix_options_chain_expiry', table_name='options_chain')
    op.drop_index('ix_options_chain_id', table_name='options_chain')
    op.drop_index('ix_options_chain_symbol', table_name='options_chain')
    op.drop_table('options_chain')
    op.drop_index('ix_auth_tokens_id', table_name='auth_tokens')
    op.drop_table('auth_tokens')
    op.add_column('broker_configs', sa.Column('config', sa.JSON(), nullable=True))
    op.add_column('broker_configs', sa.Column('status', sa.String(), nullable=True))
    op.add_column('broker_configs', sa.Column('last_error', sa.String(), nullable=True))
    op.add_column('broker_configs', sa.Column('broker_metadata', sa.JSON(), nullable=True))
    op.alter_column('broker_configs', 'user_id',
               existing_type=sa.VARCHAR(),
               type_=sa.Integer(),
               existing_nullable=True)
    op.alter_column('broker_configs', 'broker_name',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.drop_constraint('broker_configs_broker_name_key', 'broker_configs', type_='unique')
    op.create_index(op.f('ix_broker_configs_broker_name'), 'broker_configs', ['broker_name'], unique=False)
    op.create_foreign_key(None, 'broker_configs', 'users', ['user_id'], ['id'])
    op.drop_column('broker_configs', 'api_secret')
    op.drop_column('broker_configs', 'access_token')
    op.drop_column('broker_configs', 'config_data')
    op.drop_column('broker_configs', 'api_key')
    op.add_column('positions', sa.Column('avg_price', sa.Float(), nullable=True))
    op.add_column('positions', sa.Column('status', sa.String(), nullable=True))
    op.add_column('positions', sa.Column('unrealized_pnl', sa.Float(), nullable=True))
    op.add_column('positions', sa.Column('created_at', sa.DateTime(), nullable=True))
    op.drop_column('positions', 'average_price')
    op.drop_column('positions', 'product_type')
    op.drop_column('positions', 'updated_at')
    op.drop_column('positions', 'pnl')
    op.drop_column('positions', 'current_price')
    op.add_column('trades', sa.Column('session_id', sa.Integer(), nullable=True))
    op.add_column('trades', sa.Column('entry_price', sa.Float(), nullable=True))
    op.add_column('trades', sa.Column('exit_price', sa.Float(), nullable=True))
    op.add_column('trades', sa.Column('profit_loss', sa.Float(), nullable=True))
    op.add_column('trades', sa.Column('created_at', sa.DateTime(), nullable=True))
    op.add_column('trades', sa.Column('closed_at', sa.DateTime(), nullable=True))
    op.add_column('trades', sa.Column('strategy_id', sa.Integer(), nullable=True))
    op.add_column('trades', sa.Column('take_profit', sa.Float(), nullable=True))
    op.drop_constraint('trades_order_id_key', 'trades', type_='unique')
    op.create_foreign_key(None, 'trades', 'strategies', ['strategy_id'], ['id'])
    op.create_foreign_key(None, 'trades', 'trading_sessions', ['session_id'], ['id'])
    op.drop_column('trades', 'exchange_order_id')
    op.drop_column('trades', 'trade_data')
    op.drop_column('trades', 'product_type')
    op.drop_column('trades', 'price')
    op.drop_column('trades', 'placed_at')
    op.drop_column('trades', 'order_type')
    op.drop_column('trades', 'trigger_price')
    op.drop_column('trades', 'executed_at')
    op.drop_column('trades', 'order_id')
    op.drop_column('trades', 'target')
    op.add_column('users', sa.Column('password_hash', sa.String(), nullable=False))
    op.alter_column('users', 'username',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.alter_column('users', 'email',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.drop_constraint('users_email_key', 'users', type_='unique')
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.drop_column('users', 'hashed_password')
    op.drop_column('users', 'is_active')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('users', sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('hashed_password', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.create_unique_constraint('users_email_key', 'users', ['email'])
    op.alter_column('users', 'email',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.alter_column('users', 'username',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.drop_column('users', 'password_hash')
    op.add_column('trades', sa.Column('target', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('trades', sa.Column('order_id', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('trades', sa.Column('executed_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('trades', sa.Column('trigger_price', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('trades', sa.Column('order_type', postgresql.ENUM('MARKET', 'LIMIT', 'SL', 'SL_M', name='ordertype'), autoincrement=False, nullable=True))
    op.add_column('trades', sa.Column('placed_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('trades', sa.Column('price', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('trades', sa.Column('product_type', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('trades', sa.Column('trade_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('trades', sa.Column('exchange_order_id', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'trades', type_='foreignkey')
    op.drop_constraint(None, 'trades', type_='foreignkey')
    op.create_unique_constraint('trades_order_id_key', 'trades', ['order_id'])
    op.drop_column('trades', 'take_profit')
    op.drop_column('trades', 'strategy_id')
    op.drop_column('trades', 'closed_at')
    op.drop_column('trades', 'created_at')
    op.drop_column('trades', 'profit_loss')
    op.drop_column('trades', 'exit_price')
    op.drop_column('trades', 'entry_price')
    op.drop_column('trades', 'session_id')
    op.add_column('positions', sa.Column('current_price', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('positions', sa.Column('pnl', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('positions', sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('positions', sa.Column('product_type', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('positions', sa.Column('average_price', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.drop_column('positions', 'created_at')
    op.drop_column('positions', 'unrealized_pnl')
    op.drop_column('positions', 'status')
    op.drop_column('positions', 'avg_price')
    op.add_column('broker_configs', sa.Column('api_key', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('broker_configs', sa.Column('config_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('broker_configs', sa.Column('access_token', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('broker_configs', sa.Column('api_secret', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'broker_configs', type_='foreignkey')
    op.drop_index(op.f('ix_broker_configs_broker_name'), table_name='broker_configs')
    op.create_unique_constraint('broker_configs_broker_name_key', 'broker_configs', ['broker_name'])
    op.alter_column('broker_configs', 'broker_name',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.alter_column('broker_configs', 'user_id',
               existing_type=sa.Integer(),
               type_=sa.VARCHAR(),
               existing_nullable=True)
    op.drop_column('broker_configs', 'broker_metadata')
    op.drop_column('broker_configs', 'last_error')
    op.drop_column('broker_configs', 'status')
    op.drop_column('broker_configs', 'config')
    op.create_table('auth_tokens',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('broker', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('access_token', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('refresh_token', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('expiry', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('config_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='auth_tokens_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='auth_tokens_pkey')
    )
    op.create_index('ix_auth_tokens_id', 'auth_tokens', ['id'], unique=False)
    op.create_table('options_chain',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('symbol', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('expiry', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('strike', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('option_type', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('last_price', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('volume', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('oi', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('iv', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('delta', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('theta', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='options_chain_pkey')
    )
    op.create_index('ix_options_chain_symbol', 'options_chain', ['symbol'], unique=False)
    op.create_index('ix_options_chain_id', 'options_chain', ['id'], unique=False)
    op.create_index('ix_options_chain_expiry', 'options_chain', ['expiry'], unique=False)
    op.create_table('trading_strategies',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('parameters', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='trading_strategies_pkey'),
    sa.UniqueConstraint('name', name='trading_strategies_name_key')
    )
    op.create_index('ix_trading_strategies_id', 'trading_strategies', ['id'], unique=False)
    op.drop_index(op.f('ix_trade_logs_id'), table_name='trade_logs')
    op.drop_table('trade_logs')
    op.drop_index(op.f('ix_trading_sessions_symbol'), table_name='trading_sessions')
    op.drop_index(op.f('ix_trading_sessions_id'), table_name='trading_sessions')
    op.drop_table('trading_sessions')
    op.drop_index(op.f('ix_orders_symbol'), table_name='orders')
    op.drop_index(op.f('ix_orders_id'), table_name='orders')
    op.drop_table('orders')
    op.drop_index(op.f('ix_strategies_id'), table_name='strategies')
    op.drop_table('strategies')
    op.drop_index(op.f('ix_market_data_symbol'), table_name='market_data')
    op.drop_index(op.f('ix_market_data_id'), table_name='market_data')
    op.drop_table('market_data')
    # ### end Alembic commands ###